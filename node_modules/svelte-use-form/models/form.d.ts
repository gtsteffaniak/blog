import { FormControl } from "./formControl";
import type { FormControlElement } from "./formControlElement";
import type { FormProperties } from "./formProperties";
import type { ErrorMap, Validator } from "./validator";
export declare class Form<Keys extends keyof any> {
    /**
     * Function for creating a Form
     * @remarks This allows us to specify the index signatures in the class
     */
    static create<Keys extends keyof any>(initialData: FormProperties, notifyListeners: Function): Form<Keys> & FormControlsSpecified<Keys> & FormControlsUnspecified;
    private readonly _notifyListeners;
    get valid(): boolean;
    get touched(): boolean;
    get values(): FormValues<Keys>;
    set touched(value: boolean);
    private constructor();
    /** Reset the whole form */
    reset(): void;
    /** @internal Add a form conrol to the Form */
    _addControl(name: string, initial?: string, validators?: Validator[], elements?: FormControlElement[], errorMap?: ErrorMap): void;
    private forEachControl;
}
export declare class FormControlMissingError extends Error {
}
export type FormControlsUnspecified = {
    [key: string]: FormControl | undefined;
};
export type FormControlsSpecified<Keys extends keyof any> = {
    [K in Keys]: FormControl;
};
export type FormValues<Keys extends keyof any> = Partial<Record<string, string>> & Record<Keys, string>;
