import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        /**
           * The name of the form control.
           *
           * @remarks Can be omitted when using a wrapping HintGroup setting the `for` property.
           * @exmaple
           * ``` svelte
           * <input name="nameOfFormControl" use:validators={[required]} />
           * <Hint for="nameOfFormControl" on="required">HINT</Hint>
           * ```
           * OR
           * ``` svelte
           * <input name="nameOfFormControl" use:validators={[required]} />
           * <HintGroup for="nameOfFormControl">
           *   <Hint on="required">HINT</Hint>
           * </HintGroup>
           * ```
           */ for?: string | undefined;
        /** The name of useForm instance */ form?: string | undefined;
        /** `class` of the underlying html element */ class?: string | undefined;
        /** `id` of the underlying html element */ id?: string | undefined;
        /** The name of the error that should show this hint */ on?: string | undefined;
        /** Hides this hint when the given validator is triggered */ hideWhen?: string | undefined;
        /** Does the same thing as `hideWhen="required"` */ hideWhenRequired?: boolean | undefined;
        /** Show the hint even when the field is untouched */ showWhenUntouched?: boolean | undefined;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {
            value: any;
        };
    };
};
export type HintProps = typeof __propDef.props;
export type HintEvents = typeof __propDef.events;
export type HintSlots = typeof __propDef.slots;
export default class Hint extends SvelteComponentTyped<HintProps, HintEvents, HintSlots> {
}
export {};
